package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.41

import (
	"context"
	"fmt"

	"github.com/gligneul/nonodo/internal/reader/graph/model"
)

// Input is the resolver for the input field.
func (r *queryResolver) Input(ctx context.Context, index int) (*model.Input, error) {
	panic(fmt.Errorf("not implemented: Input - input"))
}

// Voucher is the resolver for the voucher field.
func (r *queryResolver) Voucher(ctx context.Context, voucherIndex int, inputIndex int) (*model.Voucher, error) {
	panic(fmt.Errorf("not implemented: Voucher - voucher"))
}

// Notice is the resolver for the notice field.
func (r *queryResolver) Notice(ctx context.Context, noticeIndex int, inputIndex int) (*model.Notice, error) {
	panic(fmt.Errorf("not implemented: Notice - notice"))
}

// Report is the resolver for the report field.
func (r *queryResolver) Report(ctx context.Context, reportIndex int, inputIndex int) (*model.Report, error) {
	panic(fmt.Errorf("not implemented: Report - report"))
}

// Inputs is the resolver for the inputs field.
func (r *queryResolver) Inputs(ctx context.Context, first *int, last *int, after *string, before *string, where *model.InputFilter) (*model.InputConnection, error) {
	panic(fmt.Errorf("not implemented: Inputs - inputs"))
}

// Vouchers is the resolver for the vouchers field.
func (r *queryResolver) Vouchers(ctx context.Context, first *int, last *int, after *string, before *string) (*model.VoucherConnection, error) {
	panic(fmt.Errorf("not implemented: Vouchers - vouchers"))
}

// Notices is the resolver for the notices field.
func (r *queryResolver) Notices(ctx context.Context, first *int, last *int, after *string, before *string) (*model.NoticeConnection, error) {
	panic(fmt.Errorf("not implemented: Notices - notices"))
}

// Reports is the resolver for the reports field.
func (r *queryResolver) Reports(ctx context.Context, first *int, last *int, after *string, before *string) (*model.ReportConnection, error) {
	panic(fmt.Errorf("not implemented: Reports - reports"))
}

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type queryResolver struct{ *Resolver }
